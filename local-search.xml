<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“读序”小感</title>
    <link href="/2022/06/16/%E2%80%9C%E4%B9%A6%E5%BA%8F%E2%80%9D%E5%B0%8F%E6%84%9F/"/>
    <url>/2022/06/16/%E2%80%9C%E4%B9%A6%E5%BA%8F%E2%80%9D%E5%B0%8F%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>一位真正的作家永远只为内心写作，只有内心才会真实的告诉他，他的自私，他的高尚是多么突出。内心让他真实的了解自己，一旦了解了自己，也就了解了世界。<br>那一个真正自由，向往生活，热爱生活，刻苦学习的人，是不是也该听从自己的内心，只有内心会真实的告诉我，我的懒惰，我的肮脏，我的虚伪，我的勤奋，我的善良是多么突出，内心让我真实的了解自己。我也许了解了自己，但一直都在逃避自己。<br>余华老师说，内心不是时时刻刻都是敞开的，它更多的时候是封闭起来，只有不停的写作，不停的写作才能使内心敞开，才能使自己置身与发现之中，就想日出的光芒照亮了黑暗，灵感这时候才会突然到来。<br>我的内心也是封闭的吧，阴暗没有阳光，霉菌在里面滋生，隐约透露这一股腐败的臭味。我是干涸的，我想作为学生时期的我，现在的我，只有不停的学习，脚踏实地的学习，为自己而学习，才能是内心敞开，才能使自己置身于高处，才能使自己有“一览众山小”的实力与风范，才能将学习真正的融入到我的生活之中。<br>我的原则是什么？我想的是“独立思考，不盲从，不撒谎”，但就像余华老师说的，他捍卫他的原则需要付出艰辛的劳动和长时期的痛苦，我的原则似乎也是成了一句口号。<br>每写一些文字，我似乎都想到的是自己的不堪，是对过去的懊恼，然后是一副势必改过自新的样子，这简直就成了一套模板，我真的有去真的了解自己吗，真的有好好的尊重自己的内心吗？真正的坚持着自己的原则和渴望吗？答案应该都是否定的。<br>我是不是把自己的精力都消耗在了对未来的幻想上了，没有真正的认真对待眼前的事物，那一点一滴的积累，那一寸一寸的进步。<br>我是不是把自己的情绪困在自我否定中了，永远觉得自己做的很不好（但好像确实有些地方很不好），更好的方式是不是应该聚焦于当前，辨析原因，找出方法，提高效率，真正的去落实，去思考。<br>平淡才是生活的常态，不能总凭着一时的激动和热血，给自己提供长久动力的，应该是那份真正的渴望。<br>我的内心世界算是干涸的吧，我应该一点点的去充盈，在学习，在好好生活中去更好的了解自己，展开自己，也约束自己，坚持自己。<br>我想：吾日三省吾身，独立思考乎？不盲从乎？不撒谎乎？<br>晨曦呀，直面自己吧，脚踏实地，真正的去成为那个你想成为的人！</p>]]></content>
    
    
    <categories>
      
      <category>my thoughts</category>
      
      <category>感想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>独自面对一切</title>
    <link href="/2022/05/17/%E8%80%83%E7%A0%94/"/>
    <url>/2022/05/17/%E8%80%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<p>独自面对一切，这是我的感觉。<br>没有人看好你，或者说，大家都认为这是飞蛾扑火？<br>好像没有人支持我报华科，家人，好朋友；我也不敢和别人说我想考华科，也许，在我自己心里，我也是不相信自己的。<br>所有人都在说：“考研——选择大于努力啊”，而我的选择，肯定不是那个最好的选择。<br>看了无数遍今年的录取名单，看着那高的吓人的分数都被刷掉了，我的忧虑又加重了几分，当然，可能我都没有进入复试的资格。<br>我是不是没有认清自己啊，都说人贵在有自知之明，我应该是没有的那一类吧。<br>我说我应该能接受最坏的结果，但好像是在欺骗自己，我不想工作，我也不想读本校的研究生。但不想和不会好像划不上等号。<br>再看自己，确实没什么很出彩的地方，我的竞争力在哪啊，真是一个令人窒息的问题，这样的我就像一个不具有资本还在进行一场豪赌；窒息啊。<br>我说再看看吧，等到九、十月份，看看自己复习得到底怎么样，再决定考哪里，这是我在找退路吗？这样的我还会坚定自己吗？这样想会有好结果吗？<br>我的复习进度也一般般啊！真是窒息，真是窒息，我还在这里伤春悲秋，想这想那！！！<br>我有病吧！<br>来啊！这两百多天！华科，我单方面和你约定了！！！<br>我只有你这一个目标，至始至终，我都不会再改变！！！<br>从这一刻起，没有什么能动摇我的决心，也没有任何人能左右我的想法，我所想的，就是最好的选择！！！<br>我希望在在华科，开始一段新的生活，充实，忙碌，美好。<br>我希望在华科精进我的学业，提升自己的能力，真正的去爱上我的专业，投入的作出一些成果来。<br>我希望在华科，去认识一群新的人，找到和自己志同道合的人，一起交流，感慨，进步！<br>我希望在华科，去认真的喜欢，爱一个人，走过四季，阴晴，互相扶持着，关心着，你中有我，我中有你。<br>我希望在华科的校门后，我们一家人，一起拍一张普通的照片…<br>飞蛾扑火吗？我要煽动我的翅膀，灭掉这火焰！</p>]]></content>
    
    
    <categories>
      
      <category>my thoughts</category>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/14/d_h_b_circuit/"/>
    <url>/2022/05/14/d_h_b_circuit/</url>
    
    <content type="html"><![CDATA[<p>错误语法：in[sel<em>4+3 : sel</em>4];用比特拼接代替assign out={in[sel<em>4+3],in[sel</em>4+2],in[sel<em>4+1],in[sel</em>4]};<br>判断溢出的方法：（1）当两补码数运算时，符号位（最高位）发生了进位但数值最高位（次高位）没有发生进位说明发生了负溢出（两负数相加变成了正数），当最高位没发生进位，但次高位进位时，发生了正溢出。<br>（2）只有两操作数的符号相同才可能发生进位，所以可以看最后结果的符号位与操作数的符号位是否一致来判断溢出。<br>卡诺图化简逻辑代数式的方法（数字电路p40页）<br>注意（1）化简中可以重复使用最小项以便得到更加简化的结果<br>（2）可以“反向合并化简”即先合并零再取反，这在化为“与或非”式时更加适用。【记住一个逻辑化简式（A+A’B=A+B<br>错误点：逻辑式中的加与乘要对应成或和与<br>典型错误，直接默认为十进制，应注明进制<br>lways@(posedge clk)<br>begin<br>case({E,L})<br>00:Q&lt;=Q;<br>10:Q&lt;=w;<br>01:Q&lt;=R;<br>11:Q&lt;=R;</p><div class="code-wrapper"><pre><code class="hljs">        endcase    end        错误：always@(posedge clk)    begin        q[0]&lt;=q[0]^x;        q[1]&lt;=(~q[1])&amp;x;        q[2]&lt;=(~q[2])|x;                z&lt;=~(q[0]|q[1]|q[2]);    end</code></pre></div><p>endmodule<br>这些赋值是同时完成的，但z的值应该在q[2:0]的值得出后才有，所以将z的赋值单独提出来，如下<br>always@(posedge clk)<br>begin<br>q[0]&lt;=q[0]^x;<br>q[1]&lt;=(~q[1])&amp;x;<br>q[2]&lt;=(~q[2])|x;<br>end<br>assign  z=~(q[0]|q[1]|q[2]);<br>对正负边沿都敏感的电路<br>reg [1:0]state;</p><div class="code-wrapper"><pre><code class="hljs">always@(posedge clk)    state[0]&lt;=d;always@(negedge clk)    state[1]&lt;=d;assign q=clk?state[0]:state[1];</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDLbits刷题——verilog language</title>
    <link href="/2022/05/07/do%20hdl_bits-verilog%20language/"/>
    <url>/2022/05/07/do%20hdl_bits-verilog%20language/</url>
    
    <content type="html"><![CDATA[<h3 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h3><p>1.重复的比特拼接</p><p>错误示列：</p><figure class="highlight verilog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> out=&#123;<span class="hljs-number">24</span>&#123;in[<span class="hljs-number">7</span>]&#125;,in&#125;;<br><br></code></pre></td></tr></table></figure><p>正确示列：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> out=&#123;&#123;<span class="hljs-number">24</span>&#123;in[<span class="hljs-number">7</span>]&#125;&#125;,in&#125;;<br><br></code></pre></td></tr></table></figure><p>2.归约操作符（reduction operators）</p><p>与按位运算符的符号一样，但操作数只有一个，对向量操作数逐位进行操作，最后产生1bit的结果。</p><p>3.case的变体casez的使用</p><p>如果分支表达式某些位的值为高阻z，那么对这些位的比较就会忽略，不予考虑，而只关注其他位的比较结果。</p><p>4.多模块的重复例化（以generate-for为例）</p><p>关于模块例化：<br>在一个模块中引用另一个模块，对其端口进行相关连接，叫做模块例化。模块例化建立了描述的层次。</p><p>（1）generate for语句必须有genvar关键字定义for的变量<br>（2）for 的内容必须加begin和end<br>（3）必须给for语段起个名字</p><p>示列：将已经提供的一百个四位全加器模块例化为一个四百位的全加器（例化部分）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog">bcd_fadd instance1(<span class="hljs-variable">.cout</span>(cout1[<span class="hljs-number">0</span>]),<br>                       <span class="hljs-variable">.a</span>(a[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]),<br>                       <span class="hljs-variable">.b</span>(b[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]),<br>                       <span class="hljs-variable">.cin</span>(cin),<br>                       <span class="hljs-variable">.sum</span>(sum[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]));<br>    <span class="hljs-keyword">generate</span><br>        <span class="hljs-keyword">genvar</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i=i+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">begin</span>：adder<br>                <br>            bcd_fadd instance1(<span class="hljs-variable">.cout</span>(cout1[i]),<br>                               <span class="hljs-variable">.a</span>(a[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>:<span class="hljs-number">4</span>*i]),<br>                               <span class="hljs-variable">.b</span>(b[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>:<span class="hljs-number">4</span>*i]),<br>                               <span class="hljs-variable">.cin</span>(cout1[i-<span class="hljs-number">1</span>]),<br>                               <span class="hljs-variable">.sum</span>(sum[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>:<span class="hljs-number">4</span>*i]));<br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">endgenerate</span><br></code></pre></td></tr></table></figure><h3 id="基本数字电路介绍及原理"><a class="markdownIt-Anchor" href="#基本数字电路介绍及原理"></a> 基本数字电路介绍及原理</h3><h4 id="全加器即含低位的进位及其组成的各种加法器"><a class="markdownIt-Anchor" href="#全加器即含低位的进位及其组成的各种加法器"></a> 全加器(即含低位的进位)及其组成的各种加法器</h4><p>1.ripple carry adder（串行进位加法器/行波进位加法器）<br>当多位数相加后，每一位的相加结果都需要等到低一位的进位产生才能建立起来；</p><p>2.Carry Look-ahead(超前进位)/Fast Carry（快速进位加法器）（数字电路P175）<br>可以通过逻辑电路事先得出每一位全加器的进位信号，则电路传输延迟时间大大减小，但电路的复杂程度大大增加</p><p>3.adder-subtractor （加减法器）<br>减法的实现通过加法完成，所以先将减数进行变形（这里操作数都是以补码的形式储存）：全部位进行取反再加一；(a + ~b + 1)</p><h4 id="数据选择器"><a class="markdownIt-Anchor" href="#数据选择器"></a> 数据选择器</h4><p>具体电路分析（数字电路p170）；CMOS传输门的使用及原理（数字电路P89）</p><h4 id="移位寄存器"><a class="markdownIt-Anchor" href="#移位寄存器"></a> 移位寄存器</h4><p>具有储存代码的功能和移位功能，即寄存器中储存的代码能够在移位脉冲的作用下依次左移或右移；可以实现数据的串并行转换。<br>设计到了触发器和时序逻辑电路知识（数字电路p226,p271）</p><h3 id="错误"><a class="markdownIt-Anchor" href="#错误"></a> 错误</h3><p>变量声明（中括号位置）</p><p>Error (10686): SystemVerilog error at top_module.v(40): sum4 has an aggregate value File:<br>放前是声明，放后是引用！！！（我不会再错了）</p><h3 id="优化写法"><a class="markdownIt-Anchor" href="#优化写法"></a> 优化写法</h3><p>verilog language联系模块中more verilog features第六题：设计一个100位的全加器。<br>我的做法：比特拼接</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module( <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] a, b,<br>    <span class="hljs-keyword">input</span> cin,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] cout,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">99</span>:<span class="hljs-number">0</span>] sum );<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span>@(*)<br>        <span class="hljs-keyword">begin</span><br>            &#123;cout[<span class="hljs-number">0</span>],sum[<span class="hljs-number">0</span>]&#125;=cin+a[<span class="hljs-number">0</span>]+b[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i=i+<span class="hljs-number">1</span>)<br>            &#123;cout[i],sum[i]&#125;=cout[i-<span class="hljs-number">1</span>]+a[i]+b[i];<br>                <br>            <br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>基于FPGA的图像采集显示系统</category>
      
      <category>第一阶段verilog语言基础（一个月）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>verilog</tag>
      
      <tag>HDLbits</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>屎里淘金——HEXO的部署</title>
    <link href="/2022/03/28/hexo%E9%83%A8%E7%BD%B2%E5%A4%A7%E5%9D%91/"/>
    <url>/2022/03/28/hexo%E9%83%A8%E7%BD%B2%E5%A4%A7%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="感慨"><a class="markdownIt-Anchor" href="#感慨"></a> 感慨</h3><p>今天又是“屎里淘金”的一天。</p><p>害，整个一个大疲惫；就像之前给深度学习框架配置环境一样，是真的难受，和无语，不知道是电脑操作系统的问题，我属于是把能踩的坑都给踩了一遍，然后疯狂的需求解决方法，可恶的CSDN，真是一个“屎坑”啊，屎里捞针是真的难受。</p><p>也怪自己英语学的不好吧，在GitHub上的解释也看的一知半解的，翻译软件也是搁那瞎翻译。</p><p>但还好吧，算是苦尽甘来，终于是实现了hexo的“一条龙服务”，希望后面用心进步，用心记录，用心回顾，也就不枉“屎里淘金”这一番了。</p><p>还是做个记录吧，我想迟早是要换电脑的，以后操作起来也有个方向，当然，最好是能够通过学习知其所以然。</p><h3 id="踩的坑"><a class="markdownIt-Anchor" href="#踩的坑"></a> 踩的坑：</h3><p>1.开始的搭建还是得找个新的教程，GitHub做了一些较大的改动，所以在文件修改上面需要用最新的方法，这次看的是B站上一个最新的教程，讲的也算详尽，前期的配置及在GitHub上的部署倒是不会存在太大的问题（当然，你得开始就是找的最新的教程，我没有，所以就…）,一切都在改变啊，知其内核，也要不断的自我更新与学习呀！</p><p>2.然后是主题的调换，我用的是 fluid,官方文档算是详尽，当然了，主要我也是直接查的，也没有去体验其他的主题，等后面有机会再说吧。</p><p>3.然后就是HexoEditor的下载了，我真的是吐了，死活不行，开始是我没有以管理员的身份使用Git报错，然后就是下载electron出错，然后就是都成功后编辑时预览是空白，我真的是快被折磨死了，直接一步到位吧： <a href="https://github.com/zhuzhuyule/HexoEditor/releases">https://github.com/zhuzhuyule/HexoEditor/releases</a>,直接当软件下载，我也不知道为什么当时没有发现这个，这还是在我找解决预览问题的方法时发现的。（当然，不知道这是不是也需要下载electorn,如果需要，到  <em><a href="https://crifan.github.io/desktop_app_framework_electron/website/electron_intro/">这里</a></em>. 寻找你的答案 ）。</p><p>4.还有在本地预览的问题，我的本地预览端口始终在Git界面关闭不了，我现在也没找到原因，但是可以在cmd中使用 taskkill /f /t /im node.exe结束进程。</p><p>5.在部署到Github上时，有时是因为网络问题而报错，可以删除博客文件中的.deploy.git后重试。总之，还是要尽量看懂一点报错原因。</p><p>看起来好像我踩的坑不多，但其实重复试错真的很耗时间，再说一次：屎里淘金真的很难受。</p><p>我主要也是捡比较坑的地方稍稍列举，不会很详尽，可能还有其他的情况出现，那就，一起当掏粪人咯。</p><p>学习就是样莫怕滚打的，屎里淘金也算是一种很好的技能了吧！</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
      <category>HEXO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>采坑</tag>
      
      <tag>屎里淘金</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>起航</title>
    <link href="/2022/03/25/%E8%B5%B7%E8%88%AA/"/>
    <url>/2022/03/25/%E8%B5%B7%E8%88%AA/</url>
    
    <content type="html"><![CDATA[<p>这才算是我搭建个人博客以来的第一篇文章吧，在每件事的开段，大家总是会写下自己的愿景，就好像一年的开始一样。我应该也不列外，只是，我更想把对自己在这两年半以来的自省与思考写下来，算是为今后的学习与生活指明一个大致的，持续一段时期的方向。</p><p>细细想来，大学本科生活已然敲响了快结束的铃声，其实早应进行自省，但也许，在这个特殊的时间节点，这种思考会来的更加深刻吧。</p><p>回首，对这几年的学习生活其实是不太满意的，我算是做了一个空想上的巨人，行动上的矮子；我让太多很好的机会流逝；我对本科课程的基础打的并不是很牢固；我的学习并不充实；很多很多，都没有做的很好，算是得过且过了吧。造成这种状况原因很多，自己的眼高手低，病态的懒散，学习方法的缺陷，这些一点点的造就了现在的僵局与不满。</p><p>而如今，进入考研的重要阶段，之前积累的一些恶果逐渐显现出来，让人感到有些身心俱疲，同样，在后续进阶课程的学习中，我也吃力无比，雪球就越滚越大。我陷入焦虑与自我否定之中。</p><p>但自省啊，不是为了悔恨过去，是为了更好的规划未来呀，对学习，对生活，我应该做出改变啊！</p><p>从今天开始，我应该是脚踏实地的，加强对基础知识框架的建立与巩固，我应该通过引用或者习题加深对这些知识的理解。<br>从今天开始，我应该是每天有所进步的，学习永远是一个积累的过程，我绝不应该三天打鱼，两天晒网，我可以慢，但不能停。<br>从今天开始，我应该是好好生活的，我需要规律的作息与健康的饮食，我应该加强锻炼，我应该努力拥有一个良好的身体。</p><p>两年多的时间是过去了，好像没有说哪一个开始会晚了，我应该朝着自己喜欢的样子前进啊，不去做很多六十分的事情，多做几件九十分的事情；我要尽自己最大的努力去弥补之前的不足之处。我不应该局限自己的知识界面，局限自己的层面，我应该去遇见更广阔的的世界，去拥抱更有趣的知识。</p><p>种树最好的时间是十年前，其次，就是现在啊!</p>]]></content>
    
    
    <categories>
      
      <category>my thoughts</category>
      
      <category>leaning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
